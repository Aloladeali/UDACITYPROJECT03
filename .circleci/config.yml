version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Empty frontend bucket
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive

            # Delete frontend stack
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

            # Delete backend stack
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
 

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)

            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
    
  
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
       
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            python3 -m pip install --user ansible

  install_nodejs:
    description: Install Node.js 13.8.0
    steps:
      - run:
          name: Install Node.js 13.8.0
          command: |
            # Install Node.js LTS version as our base Node.js version
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs

            # Use n version manager to use Node.js v13.8.0
            sudo npm install --global n
            sudo n 13.8.0

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
    - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
    - checkout
      # Restore from cache
    - restore_cache:
        keys: [frontend-build]
      # Your job code here
    - run:
        name: Test frontend
        command: |
           cd frontend
           npm install
           npm run test

                
  test-backend:
    docker:
      # Docker image here
    - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
    - checkout
      # Restore from cache
    - restore_cache:
        keys: [backend-build]
      # Your job code here
    - run:
        name: Test frontend
        command: |
           cd backend
           npm install
           npm run test
            
  scan-frontend:
    docker:
      # Docker image here
    - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
    - checkout
      # Restore from cache
    - restore_cache:
        keys: [frontend-build]
      # Your job code here
    - run:
        name: Analyze frontend
        command: |
           cd frontend
           npm install
           npm audit fix --force --audit-level=critical
           npm audit --audit-level=critical
           
  scan-backend:
    docker:
      # Docker image here
    - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
    - checkout
      # Restore from cache
    - restore_cache:
        keys: [backend-build]
      # Your job code here
    - run:
        name: Analyze backend
        command: |
           cd backend
           npm install
           npm audit fix --force --audit-level=critical
           npm audit fix --force --audit-level=critical
           npm audit --audit-level=critical
 
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/python:3.10
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople\
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople\
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["24:6f:08:e5:90:5e:a9:ee:53:b3:a9:44:9a:8a:c0:cc"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip aws-cli openssh     
      - run:
          name: Configure server
          command: |  
            # add environment variables to server
            #echo NODE_ENV=production > ~/project/backend/.env
            #echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ~/project/backend/.env
            #echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ~/project/backend/.env
            #echo TYPEORM_HOST=$TYPEORM_HOST >> ~/project/backend/.env
            #echo TYPEORM_PORT=$TYPEORM_PORT >> ~/project/backend/.env
            #echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ~/project/backend/.env
            #echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ~/project/backend/.env
            #echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ~/project/backend/.env
            #echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ~/project/backend/.env
            #echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ~/project/backend/.env
            #cat ~/project/backend/.env       
            cd ~/project/.circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths: project/backend
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: cimg/python:3.10
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - install_nodejs
      
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/

      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations.txt
            cat migrations.txt
      - run:
          name: Send migration results to kvdb
          command: |
            # Your code here
            if grep -q "has been executed successfully." ~/project/backend/migrations.txt
            then
              # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
              curl  --insecure https://kvdb.io/73AzZCsXikP6F1anyHtZ2p/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              echo "migrated ----------"
            else
             echo "No migration happened"
            fi
     # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/python:3.10
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [frontend-build]

      - run:
          name: Install dependencies
          command: |
            # your code here
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            echo "${API_URL}"
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["24:6f:08:e5:90:5e:a9:ee:53:b3:a9:44:9a:8a:c0:cc"]

      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update --no-cache tar gzip nodejs npm aws-cli ansible openssh
      - restore_cache:
          keys: [backend-build]
      # attach workspace
      - attach_workspace:
          at: ~/

      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz

            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity.ts
            export TYPEORM_MIGRATIONS=./migrations/*.ts

            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations 

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: python:3.7-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update --no-cache curl aws-cli

      - run:
          name: Frontend smoke test.
          command: |
            # your code here
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                  # Change this to 0 after the job fails
                  return 0
              else
                  return 1
              fi
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople" \
                --output text)
            echo "${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo $API_URL
            if curl -s  "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi

      # Here's where you will add some code to rollback on failure
      #- destroy-environment
      #- revert-migrations

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum install -y npm nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation list-exports \
              --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name "udapeople-cloudfront" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
            echo OldWorkflowID: "${OldWorkflowID}"
            echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure
      - revert-migrations

  cleanup:
    docker:
      - image:  amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "${OldWorkflowID}"
            fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]